{
  "version": 3,
  "sources": ["browser-route-module:D:\\my-remix-app\\app\\routes\\login.tsx?browser", "../../../app/routes/login.tsx"],
  "sourcesContent": ["export { default, links } from \"D:\\\\my-remix-app\\\\app\\\\routes\\\\login.tsx\";", "import { json, LinksFunction } from \"remix\";\r\nimport { useSearchParams, Link, ActionFunction } from \"remix\";\r\nimport styleUrl from \"~/styles/login.css\";\r\nimport { db } from \"~/utils/db.server\";\r\n\r\nexport const links: LinksFunction = () => {\r\n  return [{ rel: \"stylesheet\", href: styleUrl }];\r\n};\r\ntype ActionData = {\r\n  formError?: string;\r\n  nameError?: string | undefined;\r\n  passwordError?: string | undefined;\r\n  fields?: {\r\n    loginType: string;\r\n    name: string;\r\n    password: string;\r\n  };\r\n};\r\nconst badRequest = (data: ActionData) => {\r\n  return json(data, { status: 400 });\r\n};\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const form = await request.formData();\r\n  const loginType = form.get(\"loginType\");\r\n  const name = form.get(\"username\");\r\n  const password = form.get(\"password\");\r\n  const redirectTo = form.get(\"redirectTo\") || \"/jokes\";\r\n  //Filter : 1 Typesafety\r\n  if (\r\n    typeof loginType !== \"string\" ||\r\n    typeof name !== \"string\" ||\r\n    typeof password !== \"string\" ||\r\n    typeof redirectTo !== \"string\"\r\n  ) {\r\n    return badRequest({ formError: \"Form not submitted correctly\" });\r\n  }\r\n  //Filter : 2 Invalid username and password\r\n  if (name.length < 3) return badRequest({ nameError: \"Invalid name\" });\r\n  if (password.length < 6)\r\n    return badRequest({ passwordError: \"Invalid password\" });\r\n  const fields = { name, password, loginType };\r\n  //Filter : 3 Login or Register\r\n  switch (loginType) {\r\n    case \"login\": {\r\n      return badRequest({\r\n        fields,\r\n        formError: \"Login can't be implemented\",\r\n      });\r\n    }\r\n    case \"register\": {\r\n      const userExists = await db.user.findFirst({ where: { username: name } });\r\n    }\r\n    default: {\r\n      return badRequest({\r\n        fields,\r\n        formError: \"Login type invalid\",\r\n      });\r\n    }\r\n  }\r\n};\r\nexport default function Login() {\r\n  const [searchParams] = useSearchParams();\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"content\">\r\n        <h1>Login</h1>\r\n        <form method=\"post\">\r\n          <input\r\n            type=\"hidden\"\r\n            name=\"redirectTo\"\r\n            value={searchParams.get(\"redirectTo\") ?? undefined}\r\n          />\r\n          <fieldset>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loginType\"\r\n                value=\"login\"\r\n                defaultChecked\r\n              />{\" \"}\r\n              Login\r\n            </label>\r\n            <label>\r\n              <input type=\"radio\" name=\"loginType\" value=\"register\" /> Register\r\n            </label>\r\n          </fieldset>\r\n          <div className=\"input-fields\">\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"username-input\">Username</label>\r\n              <input type=\"text\" id=\"username-input\" name=\"username\" />\r\n            </div>\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"password-input\">Password</label>\r\n              <input id=\"password-input\" name=\"password\" type=\"password\" />\r\n            </div>\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div className=\"links\">\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/jokes\">Jokes</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;;;ACAA;;;;;;AAGA,gBAAmB;AAEZ,IAAM,QAAuB,MAAM;AACxC,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM;AAAA;AAsDtB,iBAAiB;AA5DhC;AA6DE,QAAM,CAAC,gBAAgB;AACvB,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD,MAAI,UACJ,oCAAC,QAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAO,mBAAa,IAAI,kBAAjB,YAAkC;AAAA,MAE3C,oCAAC,YAAD,MACE,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBAAc;AAAA,MACb,KAAI,UAGT,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAQ,MAAK;AAAA,IAAY,OAAM;AAAA,MAAa,eAG5D,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAO,IAAG;AAAA,IAAiB,MAAK;AAAA,OAE9C,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IAAO,IAAG;AAAA,IAAiB,MAAK;AAAA,IAAW,MAAK;AAAA,OAElD,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,KAAS,cAI5B,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD,MACE,oCAAC,MAAD,MACE,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,KAAI,UAEf,oCAAC,MAAD,MACE,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,KAAS;AAAA;",
  "names": []
}
